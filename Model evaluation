{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Model evaluation","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"PK7pbhA__Mvo","colab_type":"code","colab":{}},"source":["import os\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import keras\n","from keras.preprocessing.image import ImageDataGenerator\n","from keras.models import Sequential, load_model\n","from keras.layers import Activation, Dense, Dropout, Flatten, Conv2D, MaxPooling2D, Input\n","from keras.optimizers import Adam\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, mean_absolute_error\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9dyxO51g_WE-","colab_type":"code","outputId":"702b1f46-b6d5-4056-dc9a-122292d8bd93","executionInfo":{"status":"ok","timestamp":1572024184169,"user_tz":420,"elapsed":20983,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}},"colab":{"base_uri":"https://localhost:8080/","height":124}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"duKkU1MD_XEa","colab_type":"code","colab":{}},"source":["validation_labels = pd.read_csv('/content/drive/My Drive/Thinkful Data Science/LIDC/candidates_validation.csv')\n","validation_path = '/content/drive/My Drive/Thinkful Data Science/LIDC/Validation/'\n","\n","test_labels = pd.read_csv('/content/drive/My Drive/Thinkful Data Science/LIDC/candidates_test.csv')\n","test_path = '/content/drive/My Drive/Thinkful Data Science/LIDC/Test/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"z448aDKX_8o_","colab_type":"code","colab":{}},"source":["# Create seperate dfs for classification and localization\n","    \n","validation_list = []\n","for i in os.listdir(validation_path):\n","  if i.startswith('pos'): validation_list.append(i)\n","    \n","val_loc_df = pd.DataFrame({'x_col': validation_list})\n","val_class_df = pd.DataFrame({'x_col': os.listdir(validation_path)})\n","\n","test_list = []\n","for i in os.listdir(test_path):\n","  if i.startswith('pos'): test_list.append(i)\n","    \n","test_loc_df = pd.DataFrame({'x_col': test_list})\n","test_class_df = pd.DataFrame({'x_col': os.listdir(test_path)})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QcPO-8Zp_ntR","colab_type":"code","colab":{}},"source":["# Now we need to structure the dataframes for the flow_from_dataframe keras method\n","\n","for i,img in enumerate(val_loc_df.x_col):\n","    img_cat = img[0:3]\n","    img_id = int(''.join([n for n in img if n.isdigit()]))            \n","\n","    if img_cat == 'pos':\n","      val_loc_df.loc[i, 'voxel_x'] = validation_labels.loc[img_id, 'voxel_x']\n","      val_loc_df.loc[i, 'voxel_y'] = validation_labels.loc[img_id, 'voxel_y']\n","      val_loc_df.loc[i, 'diameter'] = validation_labels.loc[img_id, 'voxel_d2']\n","\n","      \n","for i,img in enumerate(val_class_df.x_col):\n","    img_cat = img[0:3]\n","    img_id = int(''.join([n for n in img if n.isdigit()]))            \n","\n","    if img_cat == 'pos':\n","      val_class_df.loc[i, 'nodule'] = 'yes'\n","\n","    else:\n","      val_class_df.loc[i, 'nodule'] ='no'\n","      \n","for i,img in enumerate(test_loc_df.x_col):\n","    img_cat = img[0:3]\n","    img_id = int(''.join([n for n in img if n.isdigit()]))            \n","\n","    if img_cat == 'pos':\n","      test_loc_df.loc[i, 'voxel_x'] = test_labels.loc[img_id, 'voxel_x']\n","      test_loc_df.loc[i, 'voxel_y'] = test_labels.loc[img_id, 'voxel_y']\n","      test_loc_df.loc[i, 'diameter'] = test_labels.loc[img_id, 'voxel_d2']\n","\n","      \n","for i,img in enumerate(test_class_df.x_col):\n","    img_cat = img[0:3]\n","    img_id = int(''.join([n for n in img if n.isdigit()]))            \n","\n","    if img_cat == 'pos':\n","      test_class_df.loc[i, 'nodule'] = 'yes'\n","\n","    else:\n","      test_class_df.loc[i, 'nodule'] ='no'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gaB3x6lXAA9C","colab_type":"code","outputId":"2798ec3a-5da5-478c-90ff-4c9647972ed6","executionInfo":{"status":"ok","timestamp":1572024205873,"user_tz":420,"elapsed":782,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"source":["val_loc_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=val_loc_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col=['voxel_x','voxel_y','diameter'],\n","                                                                     directory=validation_path,\n","                                                                     target_size=(65,65),\n","                                                                     class_mode='raw',\n","                                                                     shuffle=False,\n","                                                                     batch_size=225)\n","\n","val_class_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=val_class_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col='nodule',\n","                                                                     directory=validation_path,\n","                                                                     target_size=(65,65),\n","                                                                     class_mode='binary',\n","                                                                     shuffle=False,\n","                                                                     batch_size=412)\n","\n","test_loc_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=test_loc_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col=['voxel_x','voxel_y','diameter'],\n","                                                                     directory=test_path,\n","                                                                     target_size=(65,65),\n","                                                                     class_mode='raw',\n","                                                                     shuffle=False,\n","                                                                     batch_size=102)\n","\n","test_class_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=test_class_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col='nodule',\n","                                                                     directory=test_path,\n","                                                                     target_size=(65,65),\n","                                                                     class_mode='binary',\n","                                                                     shuffle=False,\n","                                                                     batch_size=173)\n","\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Found 225 validated image filenames.\n","Found 412 validated image filenames belonging to 2 classes.\n","Found 102 validated image filenames.\n","Found 173 validated image filenames belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BQ7t_de6FKM4","colab_type":"code","colab":{}},"source":["loc_models = ['localization_model', 'localization_DA', 'localization_0.2_dropout2']\n","class_models = ['classification', 'classification_with_DA', 'classification_0.2_dropout']\n","\n","loc_df = pd.DataFrame()\n","class_df = pd.DataFrame()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gOEssjxts1lC","colab_type":"text"},"source":["Now we will loop through our lists of models and compute performance statistics in the validation and test sets. Because some of our models are trained on augmented data, it would be innapropriate to compare performance statistics in the training sets. \n","\n","Also, there is currently a bug in Keras loading the VGG16 models, so we will have to load these seperately from the model lists."]},{"cell_type":"code","metadata":{"id":"2ISVTCE7nnms","colab_type":"code","colab":{}},"source":["# Compute localization stats\n","\n","for i,m in enumerate(loc_models):\n","  model = load_model(f'/content/drive/My Drive/Thinkful Data Science/LIDC/logs/models/{m}.hdf5')\n","  val_preds = model.predict_generator(val_loc_batches, steps=1)\n","  test_preds = model.predict_generator(test_loc_batches, steps=1)\n","  \n","  loc_df.loc[i,'model'] = m\n","  \n","  # Validation scores\n","  loc_df.loc[i, 'val_x_err'] = mean_absolute_error(val_loc_df['voxel_x'], val_preds[:,0])\n","  loc_df.loc[i, 'val_y_err'] = mean_absolute_error(val_loc_df['voxel_y'], val_preds[:,1])\n","  loc_df.loc[i, 'val_diameter_err'] = mean_absolute_error(val_loc_df['diameter'], val_preds[:,2])\n","  \n","  # Test scores\n","  loc_df.loc[i,'test_x_err'] = mean_absolute_error(test_loc_df['voxel_x'], test_preds[:,0])\n","  loc_df.loc[i,'test_y_err'] = mean_absolute_error(test_loc_df['voxel_y'], test_preds[:,1])\n","  loc_df.loc[i,'test_diameter_err'] = mean_absolute_error(test_loc_df['diameter'], test_preds[:,2])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U-ZQx70fvKcx","colab_type":"code","colab":{}},"source":["# Compute classification stats  \n","  \n","for i,m in enumerate(class_models):\n","    model = load_model(f'/content/drive/My Drive/Thinkful Data Science/LIDC/logs/models/{m}.hdf5')\n","    val_preds = np.where(model.predict_generator(val_class_batches, steps=1)<0.5,'no','yes')[:,0]\n","    test_preds = np.where(model.predict_generator(test_class_batches, steps=1)<0.5, 'no','yes')[:,0]\n","     \n","    class_df.loc[i,'model'] = m\n","\n","    # Validation scores\n","\n","    class_df.loc[i, 'val_accuracy'] = accuracy_score(val_class_df['nodule'],val_preds)\n","    class_df.loc[i, 'val_precision'] = precision_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    class_df.loc[i, 'val_recall'] = recall_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    class_df.loc[i, 'val_f1'] = f1_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    \n","    # Test scores\n","\n","    class_df.loc[i, 'test_accuracy'] = accuracy_score(test_class_df['nodule'],test_preds)\n","    class_df.loc[i, 'test_precision'] = precision_score(test_class_df['nodule'],test_preds, pos_label='yes')\n","    class_df.loc[i, 'test_recall'] = recall_score(test_class_df['nodule'],test_preds, pos_label='yes')\n","    class_df.loc[i, 'test_f1'] = f1_score(test_class_df['nodule'],test_preds, pos_label='yes')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eZUTVQAI1NQ1","colab_type":"text"},"source":["Now we will need to add the VGG16 models to our tables, we need to manually create the architecture for these and then add the saved weights. We will also need to use new generators as the smallest input shape that can be used by the VGG16 models is 150,150."]},{"cell_type":"code","metadata":{"id":"Cwgjc0nu4pis","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":86},"outputId":"0cf91b08-5f12-457e-cdf9-f6f6dac59bfd","executionInfo":{"status":"ok","timestamp":1572024579378,"user_tz":420,"elapsed":717,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}}},"source":["val_loc_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=val_loc_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col=['voxel_x','voxel_y','diameter'],\n","                                                                     directory=validation_path,\n","                                                                     target_size=(150,150),\n","                                                                     class_mode='raw',\n","                                                                     shuffle=False,\n","                                                                     batch_size=225)\n","\n","val_class_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=val_class_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col='nodule',\n","                                                                     directory=validation_path,\n","                                                                     target_size=(150,150),\n","                                                                     class_mode='binary',\n","                                                                     shuffle=False,\n","                                                                     batch_size=412)\n","\n","test_loc_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=test_loc_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col=['voxel_x','voxel_y','diameter'],\n","                                                                     directory=test_path,\n","                                                                     target_size=(150,150),\n","                                                                     class_mode='raw',\n","                                                                     shuffle=False,\n","                                                                     batch_size=102)\n","\n","test_class_batches = ImageDataGenerator(rescale=1/255).flow_from_dataframe(dataframe=test_class_df,\n","                                                                     x_col='x_col',\n","                                                                     y_col='nodule',\n","                                                                     directory=test_path,\n","                                                                     target_size=(150,150),\n","                                                                     class_mode='binary',\n","                                                                     shuffle=False,\n","                                                                     batch_size=173)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Found 225 validated image filenames.\n","Found 412 validated image filenames belonging to 2 classes.\n","Found 102 validated image filenames.\n","Found 173 validated image filenames belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VP1XugWAuGtX","colab_type":"code","colab":{}},"source":["loc_models = ['VGG16_localization', 'VGG16_localization_DA']\n","class_models = ['VGG16_classification', 'VGG16_classification_with_DA']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZjRWYAHV2QfG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"outputId":"c1cf455f-f6b6-4ecf-e234-576229360f3b","executionInfo":{"status":"ok","timestamp":1572024594057,"user_tz":420,"elapsed":8384,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}}},"source":["# Create the architecture of our localization and classification models\n","\n","VGG16 = keras.applications.vgg16.VGG16(include_top=False, input_shape=(150,150,3))\n","\n","loc_model = Sequential()\n","\n","for layer in VGG16.layers[:-1]:\n","  loc_model.add(layer)\n","  \n","for layer in model.layers:\n","  layer.trainable = False\n","  \n","  \n","loc_model.add(MaxPooling2D(2,2))\n","loc_model.add(Flatten())\n","loc_model.add(Dense(1024, activation='relu'))\n","loc_model.add(Dense(1024, activation='relu'))\n","loc_model.add(Dense(3, activation='linear'))\n","\n","class_model = Sequential()\n","\n","for layer in VGG16.layers[:-1]:\n","  class_model.add(layer)\n","  \n","for layer in model.layers:\n","  layer.trainable = False\n","  \n","  \n","class_model.add(MaxPooling2D(2,2))\n","class_model.add(Flatten())\n","class_model.add(Dense(1024, activation='relu'))\n","class_model.add(Dense(1024, activation='relu'))\n","class_model.add(Dense(1, activation='sigmoid'))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Downloading data from https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58892288/58889256 [==============================] - 5s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wMx3Tzxm4SxU","colab_type":"code","colab":{}},"source":["# Compute localization stats\n","i = loc_df.shape[0]+1\n","  \n","for m in loc_models:\n","  \n","  loc_model.load_weights(f'/content/drive/My Drive/Thinkful Data Science/LIDC/logs/models/{m}.hdf5')\n","  val_preds = loc_model.predict_generator(val_loc_batches, steps=1)\n","  test_preds = loc_model.predict_generator(test_loc_batches, steps=1)\n","  \n","  loc_df.loc[i,'model'] = m\n","  \n","  # Validation scores\n","  loc_df.loc[i, 'val_x_err'] = mean_absolute_error(val_loc_df['voxel_x'], val_preds[:,0])\n","  loc_df.loc[i, 'val_y_err'] = mean_absolute_error(val_loc_df['voxel_y'], val_preds[:,1])\n","  loc_df.loc[i, 'val_diameter_err'] = mean_absolute_error(val_loc_df['diameter'], val_preds[:,2])\n","  \n","  # Test scores\n","  loc_df.loc[i,'test_x_err'] = mean_absolute_error(test_loc_df['voxel_x'], test_preds[:,0])\n","  loc_df.loc[i,'test_y_err'] = mean_absolute_error(test_loc_df['voxel_y'], test_preds[:,1])\n","  loc_df.loc[i,'test_diameter_err'] = mean_absolute_error(test_loc_df['diameter'], test_preds[:,2])\n","  \n","  i = i+1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wn2jr6x_4cPy","colab_type":"code","colab":{}},"source":["# Compute classification stats  \n","i = class_df.shape[0]+1\n","\n","for m in class_models:\n","  \n","    class_model.load_weights(f'/content/drive/My Drive/Thinkful Data Science/LIDC/logs/models/{m}.hdf5')\n","    val_preds = np.where(class_model.predict_generator(val_class_batches, steps=1)<0.5,'no','yes')[:,0]\n","    test_preds = np.where(class_model.predict_generator(test_class_batches, steps=1)<0.5, 'no','yes')[:,0]\n","     \n","    class_df.loc[i,'model'] = m\n","\n","    # Validation scores\n","\n","    class_df.loc[i, 'val_accuracy'] = accuracy_score(val_class_df['nodule'],val_preds)\n","    class_df.loc[i, 'val_precision'] = precision_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    class_df.loc[i, 'val_recall'] = recall_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    class_df.loc[i, 'val_f1'] = f1_score(val_class_df['nodule'],val_preds, pos_label='yes')\n","    \n","    # Test scores\n","\n","    class_df.loc[i, 'test_accuracy'] = accuracy_score(test_class_df['nodule'],test_preds)\n","    class_df.loc[i, 'test_precision'] = precision_score(test_class_df['nodule'],test_preds, pos_label='yes')\n","    class_df.loc[i, 'test_recall'] = recall_score(test_class_df['nodule'],test_preds, pos_label='yes')\n","    class_df.loc[i, 'test_f1'] = f1_score(test_class_df['nodule'],test_preds, pos_label='yes')\n","    \n","    i= i+1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bpa0NysJ5s5M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"af739f1b-46f0-46db-f5f2-bc0468a85499","executionInfo":{"status":"ok","timestamp":1572025791504,"user_tz":420,"elapsed":847,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}}},"source":["loc_df"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>val_x_err</th>\n","      <th>val_y_err</th>\n","      <th>val_diameter_err</th>\n","      <th>test_x_err</th>\n","      <th>test_y_err</th>\n","      <th>test_diameter_err</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>localization_model</td>\n","      <td>2.930275</td>\n","      <td>2.851579</td>\n","      <td>4.401731</td>\n","      <td>2.576849</td>\n","      <td>2.616224</td>\n","      <td>4.366366</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>localization_DA</td>\n","      <td>3.298873</td>\n","      <td>3.464500</td>\n","      <td>6.198379</td>\n","      <td>3.570602</td>\n","      <td>3.011198</td>\n","      <td>6.184677</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>localization_0.2_dropout2</td>\n","      <td>2.597422</td>\n","      <td>2.550744</td>\n","      <td>2.320954</td>\n","      <td>2.471137</td>\n","      <td>2.410481</td>\n","      <td>2.518238</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>VGG16_localization</td>\n","      <td>2.907379</td>\n","      <td>3.170946</td>\n","      <td>3.024728</td>\n","      <td>3.690708</td>\n","      <td>2.977803</td>\n","      <td>3.601708</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>VGG16_localization_DA</td>\n","      <td>3.736791</td>\n","      <td>3.796438</td>\n","      <td>2.849857</td>\n","      <td>4.290940</td>\n","      <td>3.711243</td>\n","      <td>3.126545</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                       model  val_x_err  ...  test_y_err  test_diameter_err\n","0         localization_model   2.930275  ...    2.616224           4.366366\n","1            localization_DA   3.298873  ...    3.011198           6.184677\n","2  localization_0.2_dropout2   2.597422  ...    2.410481           2.518238\n","3         VGG16_localization   2.907379  ...    2.977803           3.601708\n","4      VGG16_localization_DA   3.736791  ...    3.711243           3.126545\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"hiLGdbvo-lRV","colab_type":"text"},"source":["We can see that the localization_0.2_dropout2 model has the lowest error terms in every reported metric! "]},{"cell_type":"code","metadata":{"id":"Pw0Ktu42-Pki","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"a7970d49-0349-4525-ebae-16c103aed396","executionInfo":{"status":"ok","timestamp":1572025752792,"user_tz":420,"elapsed":683,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}}},"source":["class_df"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>val_accuracy</th>\n","      <th>val_precision</th>\n","      <th>val_recall</th>\n","      <th>val_f1</th>\n","      <th>test_accuracy</th>\n","      <th>test_precision</th>\n","      <th>test_recall</th>\n","      <th>test_f1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>classification</td>\n","      <td>0.788835</td>\n","      <td>0.810811</td>\n","      <td>0.800000</td>\n","      <td>0.805369</td>\n","      <td>0.763006</td>\n","      <td>0.790476</td>\n","      <td>0.813725</td>\n","      <td>0.801932</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>classification_with_DA</td>\n","      <td>0.902913</td>\n","      <td>0.880658</td>\n","      <td>0.951111</td>\n","      <td>0.914530</td>\n","      <td>0.895954</td>\n","      <td>0.888889</td>\n","      <td>0.941176</td>\n","      <td>0.914286</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>classification_0.2_dropout</td>\n","      <td>0.793689</td>\n","      <td>0.807018</td>\n","      <td>0.817778</td>\n","      <td>0.812362</td>\n","      <td>0.710983</td>\n","      <td>0.728070</td>\n","      <td>0.813725</td>\n","      <td>0.768519</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>VGG16_classification</td>\n","      <td>0.808252</td>\n","      <td>0.844340</td>\n","      <td>0.795556</td>\n","      <td>0.819222</td>\n","      <td>0.728324</td>\n","      <td>0.795699</td>\n","      <td>0.725490</td>\n","      <td>0.758974</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>VGG16_classification_with_DA</td>\n","      <td>0.796117</td>\n","      <td>0.787755</td>\n","      <td>0.857778</td>\n","      <td>0.821277</td>\n","      <td>0.757225</td>\n","      <td>0.772727</td>\n","      <td>0.833333</td>\n","      <td>0.801887</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                          model  val_accuracy  ...  test_recall   test_f1\n","0                classification      0.788835  ...     0.813725  0.801932\n","1        classification_with_DA      0.902913  ...     0.941176  0.914286\n","2    classification_0.2_dropout      0.793689  ...     0.813725  0.768519\n","3          VGG16_classification      0.808252  ...     0.725490  0.758974\n","4  VGG16_classification_with_DA      0.796117  ...     0.833333  0.801887\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"ka3AKqGh_MwX","colab_type":"text"},"source":["We can see that the classification_with_DA model had the best performance across every reported metric!\n","\n","To better summarize these findings, let's create a summed error feature and an aggregated classifiation score for plotting."]},{"cell_type":"code","metadata":{"id":"OQqeHUi5-WsX","colab_type":"code","colab":{}},"source":["for i in range(loc_df.shape[0]):\n","  error_sum = sum(loc_df.iloc[i,1:])\n","  loc_df.loc[i, 'error_sum'] = error_sum\n","  \n","for i in range(class_df.shape[0]):\n","  class_df.loc[i, 'avg_score'] = np.mean(class_df.iloc[i, 1:])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p13tGDg2_hpG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":369},"outputId":"848509b9-d904-4a07-b68c-4c61602c42e4","executionInfo":{"status":"ok","timestamp":1572026799933,"user_tz":420,"elapsed":1233,"user":{"displayName":"Derek Tolbert","photoUrl":"","userId":"08552146707136211425"}}},"source":["plt.figure(figsize=(15,5))\n","\n","ax1 = plt.subplot(1,2,1)\n","sns.barplot(x='error_sum',y='model', data=loc_df.sort_values(by='error_sum', ascending=False), palette='Blues')\n","ax1.set_ylabel('')\n","plt.title('Localization Model Performance')\n","\n","ax2 = plt.subplot(1,2,2)\n","sns.barplot(x='avg_score', y='model', data=class_df.sort_values(by='avg_score'), palette='Blues')\n","plt.title('Classification Model Performance')\n","ax2.set_ylabel('')\n","\n","plt.tight_layout()\n","plt.show()"],"execution_count":85,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<Figure size 1080x360 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ZohYSVx3E1k9","colab_type":"text"},"source":["Because we want the localization model with the smallest error terms, the localization_0.2_dropout2 model is the clear winner. In the classification models, we want the model with the greatest average score. Therefore, the classification_with_DA is again the best performing model."]},{"cell_type":"code","metadata":{"id":"xaaJ6AoME9XS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}